-- Welcome to Macaulay2 !
-- In this window you may type in Macaulay2 commands 
-- and have them evaluated by the server.

-- Evaluate a line or selection by typing Shift+Enter 
-- or by clicking on Evaluate.

-- To open the Macaulay2 documentation for a 
-- topic in another browser tab or window do e.g.:

viewHelp "determinant"

-- If nothing shows up, you may need to set your browser 
-- to allow pop up windows.

-- Here are some sample commands:
  R = ZZ/101[a,b,c,d]
  I = ideal(a^2-b*c, a^3-b^3, a^4-b*d^3, a^5-c^2*d^3)
  J = ideal groebnerBasis I;
  netList J_*

  -- Some examples of rings
  A = ZZ/32003[a..g]
  B = QQ[x_1..x_6]
  C = ZZ/101[vars(0..12)]
---------------

-- something fun #1
restart
load "~/m2/Gfx/Gfx.m2"

-- dodecahedron
vertices={(-137.638,0.,26.2866),(137.638,0.,-26.2866),(-42.5325,-130.902,26.2866),(-42.5325,130.902,26.2866),(111.352,-80.9017,26.2866),(111.352,80.9017,26.2866),(-26.2866,-80.9017,111.352),(-26.2866,80.9017,111.352),(-68.8191,-50.,-111.352),(-68.8191,50.,-111.352),(68.8191,-50.,111.352),(68.8191,50.,111.352),(85.0651,0.,-111.352),(-111.352,-80.9017,-26.2866),(-111.352,80.9017,-26.2866),(-85.0651,0.,111.352),(26.2866,-80.9017,-111.352),(26.2866,80.9017,-111.352),(42.5325,-130.902,-26.2866),(42.5325,130.902,-26.2866)};
faces={{14,9,8,13,0},{1,5,11,10,4},{4,10,6,2,18},{10,11,7,15,6},{11,5,19,3,7},{5,1,12,17,19},{1,4,18,16,12},{3,19,17,9,14},{17,12,16,8,9},{16,18,2,13,8},{2,6,15,0,13},{15,7,3,14,0}};
centers=apply(faces,f->sum(f,i->toList vertices#i)); cols=apply(centers,x->0.25*x+{128,128,128});
dodecahedron=apply(#faces,i->GfxPath{flatten {"M",between("L",apply(faces#i,j->vertices#j)),"Z"},"fill"=>"rgb("|toString(cols#i#0)|","|toString(cols#i#1)|","|toString(cols#i#2)|")"});
gfxRotateAnimation(dodecahedron,GfxRange=>{-180,-180,180,180},GfxRotationMatrix=>matrix{{0.996796,-0.0538897,0.0591},{0.0573326,0.996658,-0.0581949},{-0.0557663,0.0613968,0.996554}})

a=GfxCircle("fill"=>"yellow","stroke"=>"green",GfxWidth=>1,GfxHeight=>1)
b=GfxRectangle(10,10,20,50,"fill"=>"pink","stroke"=>"black")
c=GfxCircle(50,50,50,"fill"=>"blue","fill-opacity"=>0.25)
d=GfxRectangle(60,60,40,30,"rx"=>5, "ry"=>5, "fill"=>"red", "stroke"=>"grey")
e=GfxEllipse(100,20,40,20)
f=GfxLine(0,0,100,100,"stroke"=>"green")
g=GfxPolygon({(0,10),(100,10),(90,90),(0,80)},"stroke"=>"red","fill"=>"white")
gfx (g,a,b,c,d,e,f)
GfxAnimation { "r", 0, 50, 1, Obj => a }

-- or
rgb={"red","green","blue"};
scan(rgb, x -> (value x <- GfxCircle{"fill"=>x,"stroke"=>"black",GfxWidth=>0.8,GfxHeight=>0.8}))
value\rgb
R=QQ[x_red,x_green,x_blue]
describe R
x_red^2-x_green^2
factor oo

-- something fun #2
R=ZZ[x]; expression x
x/(1+oo) -- repeat at will

-- something fun #3
restart
load "~/m2/color/color.m2"
R:"red" = QQ[x:"green"]
x^3-1



